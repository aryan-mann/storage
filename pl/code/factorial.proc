% Defining the factorial function recursively in PROC

% John David Stone
% Department of Computer Science
% Grinnell College

% created September 18, 2019

let maketimes = proc (maker)
                 proc (x) proc (y)
                  if zero?(y)
                  then 0
                  else -(x, -(0, (((maker maker) x) -(y, 1))))
in let times = proc(x) proc(y)
                        (((maketimes maketimes) x) y)
    in let makefact = proc (maker)
                       proc (n)
                        if zero?(n)
                        then 1
                        else ((times n) ((maker maker) -(n, 1)))
       in let factorial = proc (n)
                           ((makefact makefact) n)
          in (factorial 7)

% This program is free software.
% You may redistribute it and/or modify it
% under the terms of the GNU General Public License
% as published by the Free Software Foundation -- 
% either version 3 of the License,
% or (at your option) any later version.

% This program is distributed
% in the hope that it will be useful,
% but WITHOUT ANY WARRANTY --
% without even the implied warranty
% of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.

% You should have received a copy
% of the GNU General Public License
% along with this program.
% If not, it is available on the World Wide Web
% at https://www.gnu.org/licenses/gpl.html.

